// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using rota_manager.Data;

#nullable disable

namespace rota_manager.Migrations
{
    [DbContext(typeof(RotaManagerContext))]
    [Migration("20250323195133_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.14")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("rota_manager.models.Employee", b =>
                {
                    b.Property<int>("InternalEmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("InternalEmployeeId"));

                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.HasKey("InternalEmployeeId");

                    b.ToTable("Employee");
                });

            modelBuilder.Entity("rota_manager.models.Group", b =>
                {
                    b.Property<int>("GroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("GroupId"));

                    b.Property<string>("GroupName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("GroupId");

                    b.ToTable("Groups");
                });

            modelBuilder.Entity("rota_manager.models.Rota", b =>
                {
                    b.Property<int>("RotaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RotaId"));

                    b.Property<int>("GroupId")
                        .HasColumnType("integer");

                    b.Property<int>("WeekOfYear")
                        .HasColumnType("integer");

                    b.HasKey("RotaId");

                    b.HasIndex("GroupId");

                    b.ToTable("Rotas");
                });

            modelBuilder.Entity("rota_manager.models.RotaEntry", b =>
                {
                    b.Property<int>("RotaEntryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RotaEntryId"));

                    b.Property<int>("DayOfYear")
                        .HasColumnType("integer");

                    b.Property<string>("EmployeeId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("EmployeeInternalEmployeeId")
                        .HasColumnType("integer");

                    b.Property<int>("ParentRotaRotaId")
                        .HasColumnType("integer");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("RotaEntryId");

                    b.HasIndex("EmployeeInternalEmployeeId");

                    b.HasIndex("ParentRotaRotaId");

                    b.ToTable("RotaEntries");
                });

            modelBuilder.Entity("rota_manager.models.RotaHistory", b =>
                {
                    b.Property<int>("RotaHistoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("RotaHistoryId"));

                    b.Property<DateTime>("EditedTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Notes")
                        .HasColumnType("text");

                    b.Property<int>("RotaId")
                        .HasColumnType("integer");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("RotaHistoryId");

                    b.ToTable("RotaHistories");
                });

            modelBuilder.Entity("rota_manager.models.Rota", b =>
                {
                    b.HasOne("rota_manager.models.Group", null)
                        .WithMany("Rotas")
                        .HasForeignKey("GroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("rota_manager.models.RotaEntry", b =>
                {
                    b.HasOne("rota_manager.models.Employee", null)
                        .WithMany("RotaEntries")
                        .HasForeignKey("EmployeeInternalEmployeeId");

                    b.HasOne("rota_manager.models.Rota", "ParentRota")
                        .WithMany("RotaEntries")
                        .HasForeignKey("ParentRotaRotaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentRota");
                });

            modelBuilder.Entity("rota_manager.models.Employee", b =>
                {
                    b.Navigation("RotaEntries");
                });

            modelBuilder.Entity("rota_manager.models.Group", b =>
                {
                    b.Navigation("Rotas");
                });

            modelBuilder.Entity("rota_manager.models.Rota", b =>
                {
                    b.Navigation("RotaEntries");
                });
#pragma warning restore 612, 618
        }
    }
}
